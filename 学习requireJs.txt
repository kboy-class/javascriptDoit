学习require.js-阮一峰资源

1.作用：实现js文件异步加载，避免页面失去响应时间；管理模块之间的依赖性，便于代码的编写和维护。

2.require.js的加载：<script src="js/require.js" defer async="true" ></script>

async，defer 表示异步加载这个文件，IE只支持defer,而不支持async，所以两个都写上。

3.写法：<script src="js/require.js" data-main="js/main"></script>
data-main属性的作用：指定页面的主模块，这个模块会被require.js优先加载。

4.AMD规范：定义了require()函数，接受两个参数，第一个参数是一个数组，表示所依赖的模块；第二个是回调函数，当依赖模块加载完成后被调用。
如：require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){
　　　　// 模块moduleA,moduleB,moduleC这三个模块加载完成后，开始执行该部分代码。
　　});

require.config()写在主模块的头部，用户配置模块的加载行为。参数是一个对象，对象的paths属性指定模块的加载路径。
如：　　require.config({
　　　　  paths: {
　　　　　　"jquery": "jquery.min",
　　　　　　"underscore": "underscore.min",
　　　　　　"backbone": "backbone.min"
　　　　  }
　　    });
对象的baseUrl属性可以直接修改基目录。
如：　　require.config({
　　　　   baseUrl: "js/lib",
　　　　   paths: {
　　　　　　 "jquery": "jquery.min",
　　　　　　 "underscore": "underscore.min",
　　　　　　 "backbone": "backbone.min"
　　　　   }
　　    });
此时加入的三个模块所在的目录在js/lib文件夹中。
5.AMD模块的写法
之前是模块加载写法，现在是定义模块的写法。
模块必须采用define()函数来定义。
5.1模块中不依赖别的模块。
define(function(){
   //定义了一个方法。
   var eat = function(){console.log("吃饭了")}


   //暴露对象,同时将定义的方法暴露出去了
   return {
      eat:eat
   }
})
5.2模块中依赖到别的模块。
define()中的第一个参数必须是数组，就算只有一个模块也要是数组的形式。
define(['module1','module2'],function(){
   //该模块依赖了模块module1和模块module2
   var foo = module1.eat;

   return {
      foo:foo
   }
})

6.加载不符合AMD规范的模块
因为有一部分流行的函数库并不符合AMD规范。如果要加载这类模块的话，首先要用require.config()定义它们一些特征。
　　require.config({
　　　　shim: {
　　　　　　'underscore':{
　　　　　　　　exports: '_'
　　　　　　},
　　　　　　'backbone': {
　　　　　　　　deps: ['underscore','jquery'],
　　　　　　　　exports: 'Backbone'
　　　　　　}
　　　　}
　　});
(1)shim属性：专门用来配置不兼容的模块。(2)exports：输出变量，表明这个模块的外部调用的名称。(3)deps：数组，表明该模块的依赖性。

引入插件：
　　require.config({
　　　　shim: {
　　　　　　'jquery.scroll':{
　　　　　　　　deps: ['jquery'],
　　　　　　　　exports: 'jQuery.fn.scroll'
　　　　　　}
　　　　}
　　});
7.require.js插件
require 系列的插件，实现了一些功能。
domready插件，可以让回调函数在页面的dom结构加载完成后再执行。
text插件，可以加载文本。
image插件，可以加载图片文件。
完结：学习阮一峰require.js的用法。http://www.ruanyifeng.com/blog/2012/11/require_js.html